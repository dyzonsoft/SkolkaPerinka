@page "/fetchdata"
@using SkolkaPerinka.Shared.Models
@inject HttpClient Http
@inject NavigationManager navigationManager

<PageTitle>Weather forecast</PageTitle>
<MudContainer MaxWidth="MaxWidth.Medium" Class="pa-4">
    @if (forecasts == null)
    {
        <MudText>@authenticationMessage</MudText>
        <MudNavLink Variant="Variant.Filled" Href="/">Back</MudNavLink>
    } else
    {
        <MudText Typo="Typo.h4" Color="Color.Secondary">Weather forecast</MudText>
        <MudTable Items="@forecasts" Hover="true" Breakpoint="Breakpoint.Sm" Loading="false" LoadingProgressColor="Color.Info">
            <HeaderContent>
                <MudTh>Date</MudTh>
                <MudTh>Temperature</MudTh>
                <MudTh>Summary</MudTh>
                <MudTh>Action</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="date">@context.Date.ToShortDateString()</MudTd>
                <MudTd DataLabel="temp">@context.TemperatureC</MudTd>
                <MudTd DataLabel="summary" HideSmall="_hidePosition">@context.Summary</MudTd>
                <MudTd DataLabel="summary" HideSmall="_hidePosition">
                    <MudButton @onclick="(() => DeleteForecast(context.Id))" Variant="Variant.Filled">Delete</MudButton>
                    <MudButton @onclick="(() => EditForecast(context.Id))" Variant="Variant.Filled">Edit</MudButton>
                </MudTd>
            </RowTemplate>
        </MudTable>

        <MudSwitch @bind-Checked="_hidePosition">Hide <b>position</b> when Breakpoint=Xs</MudSwitch>
        <MudContainer MaxWidth="MaxWidth.Medium">
            <MudButton @onclick="CreateForecast" Variant="Variant.Filled">Create forecast</MudButton>
        </MudContainer>
    }
</MudContainer>


@code {
    private WeatherForecast[]? forecasts = null;
    private bool _hidePosition;
    [CascadingParameter] protected Task<AuthenticationState> AuthenticationState { get; set; }
    private string authenticationMessage = "Nemáte přístup k těmto datům.";

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthenticationState).User;
        if (user.Identity.IsAuthenticated == true && user.IsInRole("Director"))
        {
            forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("/api/weatherforecast");
        }
        var dd = authenticationMessage;
    }

    private async Task DeleteForecast(int id)
    {
        await Http.DeleteAsync($"/api/weatherforecast/{id}");

        await InvokeAsync(() => StateHasChanged());

    }

    private void EditForecast(int id)
    {
        navigationManager.NavigateTo("/editforecast/" + id);
    }

    private void CreateForecast()
    {
        navigationManager.NavigateTo("/createforecast");
    }
}